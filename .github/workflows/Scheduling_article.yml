name: Scheduled article creation + Build and Deploy Jekyll Site to GitHub Pages

on:
  # Allow manual triggering of the workflow
  workflow_dispatch:

  # Schedule the workflow to run at specified times in UTC
  schedule:
    - cron: '31 7 * * *'   # Runs at 07:31 AM UTC every day
    - cron: '33 13 * * *'  # Runs at 01:33 PM UTC every day
    - cron: '37 17 * * *'  # Runs at 05:37 PM UTC every day

permissions:
  contents: write  # Allows write access to repository contents
  pages: write     # Grants permissions needed to manage GitHub Pages
  id-token: write  # Needed for interactions that require an ID token

concurrency:
  group: "pages"                # Grouping concurrent jobs to avoid conflicts
  cancel-in-progress: false     # Do not cancel running jobs if new ones start

jobs:
  build:
    runs-on: ubuntu-latest      # Specifies the host operating system for the job

    steps:
      # Checkout the code from the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Setup a Python environment using the specified version
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install required Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the Python script to generate articles with environmental variables
      - name: Run generate_article.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # API key for OpenAI
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  # Telegram bot token
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  # Telegram chat ID
          INDEXNOW_API_KEY: ${{ secrets.INDEXNOW_API_KEY }}  # API key for IndexNow
        run: |
          python AI_scripts/generate_article.py
          
      # Commit any new or updated files to the repository
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          # Only commit if there are changes
          git diff-index --quiet HEAD || git commit -m "Add newly generated article"
          git push

      - name: Create IndexNow key file
        run: echo ${{ secrets.INDEXNOW_API_KEY }} > ${{ secrets.INDEXNOW_API_KEY }}.txt
  
      # Setup Ruby environment for Jekyll
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'   # Specify Ruby version
          bundler-cache: true   # Enable caching for Bundler
          cache-version: 0      # Cache version for dependency management

      # Configure GitHub Pages settings
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Build the Jekyll site using the base URL provided by GitHub Pages
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production  # Set environment to production for Jekyll

      # Upload the generated site as an artifact for deployment
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages  # Deployment environment name
      url: ${{ steps.deployment.outputs.page_url }}  # URL for deployed site
    runs-on: ubuntu-latest  # Specifies the host operating system for deployment
    needs: build            # Ensures this job runs after the build is complete

    steps:
      # Deploy the site to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Check Pages deployment status
        run: |
          timeout=0
          while [ $timeout -lt 300 ]; do
            status=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }}/pages/deployment/status | jq -r '.status')
            if [ "$status" == "active" ] || [ "$status" == "built" ]; then
              echo "Deployment successful!"
              exit 0
            elif [ "$status" == "failed" ]; then
              echo "Deployment failed!"
              exit 1
            fi
            echo "Current status: $status"
            timeout=$((timeout + 10))
            sleep 10
          done
          echo "Timeout reached, aborting!"
          exit 1